// automatically generated by the FlatBuffers compiler, do not modify

package com.daniel.FitTrackerApp;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Weights extends Table {
  public static Weights getRootAsWeights(ByteBuffer _bb) { return getRootAsWeights(_bb, new Weights()); }
  public static Weights getRootAsWeights(ByteBuffer _bb, Weights obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Weights __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Weight weights(int j) { return weights(new Weight(), j); }
  public Weight weights(Weight obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int weightsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createWeights(FlatBufferBuilder builder,
      int weightsOffset) {
    builder.startObject(1);
    Weights.addWeights(builder, weightsOffset);
    return Weights.endWeights(builder);
  }

  public static void startWeights(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addWeights(FlatBufferBuilder builder, int weightsOffset) { builder.addOffset(0, weightsOffset, 0); }
  public static int createWeightsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWeightsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endWeights(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

